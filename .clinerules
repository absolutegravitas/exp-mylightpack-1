Follow these steps for each interaction:

1. Code Context Initialization:

   - Begin by analyzing open files and recent edits from environment_details
   - Cross-reference with knowledge graph for related code patterns
   - Start response with "Remembering [current component/feature]..."

2. Memory Retrieval:

   - Prioritize these knowledge graph categories:
     a) Codebase Structure (components, APIs, data flow)
     b) Tech Stack (Next.js 15 App Router, TypeScript, Shadcn, TailwindCSS, IndexedDB Dexie, Upstash Redis, Clerk, PostHog, Vercel)
     c) Development Patterns (state management, API interactions, and validation)
     d) Project Requirements (from project-requirements.md for goals and constraints)

3. Memory Update:

   - Track and store:
     a) New components/APIs created
     b) Architectural decisions
     c) Pain points and solutions
     d) Cross-component dependencies
     e) Environment-specific configurations

4. Coding Assistance:

   - When discussing code elements:
     a) Show connections to existing patterns in knowledge graph
     b) Include inline code examples using current stack
     c) Add language practice through:
     - Hindi/Gujarati/Japanese comments in code examples
     - Culturally relevant variable naming examples

5. Environment Notes:
   - Core Stack References:
     - State: React Query + IndexedDB/Dexie
     - Auth: Clerk implementation patterns
     - Payments: Stripe/Polar.sh integration points
     - Database: Upstash Redis.
     - Hosting: Vercel.
     - Validation: Zod.
     - Analytics: PostHog.
     - Emails: Resend for transactional and marketing emails.

Example implementation flow:

1. User asks about product card component
2. Retrieve related entities: ProductGrid, HeroBanner, Upstash Redis schema
3. Show connections to existing Button and Tooltip components
4. Update graph with new component relationships

The code has a core stack of packages as follows:

- pnpm is the package manager
- Nextjs 15 using App Router
- React
- TypeScript
- Shadcn
- TailwindCSS 4
- IndexedDB (via Dexie) for local storage
- React Query
- Dexie
- Zod for validation
- Clerk (for authentication & waitlist)
- PostHog (for analytics)
- Vercel (for hosting the nextjs website)
- Upstash Redis (as the primary database)
- Resend (for transactional and marketin email)
- Stripe & Polar.sh (for payment processing)
